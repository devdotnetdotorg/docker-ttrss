daemon off;

error_log stderr notice;
pid /var/run/nginx.pid;
##env DB_HOST;
##env DB_NAME;
##env DB_USER;
##env DB_PASS;

worker_processes  1;
events {
    worker_connections  1024;
	
	#add
    # The effective method, used on Linux 2.6+, optmized to serve many clients with each thread.
    use epoll;
    # Accept as many connections as possible, after nginx gets notification about a new connection.
    multi_accept on;
    ####   
}

http {
  sendfile on;
  include    /etc/nginx/mime.types;
  include    /etc/nginx/fastcgi.conf;
  default_type application/octet-stream;
  access_log stdout;
  tcp_nopush   on;
  client_body_temp_path /tmp/nginx/body 1 2;
  fastcgi_temp_path /tmp/nginx/fastcgi_temp 1 2;

  log_format blocked '$time_local: Blocked request from $http_x_real_ip $request';

  log_format specialLog '$http_x_real_ip - $remote_user [$time_local]  '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent"';

  client_max_body_size 512M;
  
  ##Add
    #Для повышения производительности добавь следующие строки:
     # Allow the server to close the connection after a client stops responding. 
    reset_timedout_connection on;
    
    # Send the client a "request timed out" if the body is not loaded by this time.
    # Таймаут при чтении тела запроса клиента
    client_body_timeout 10;
    
    # Таймаут при чтении заголовка запроса клиента
    client_header_timeout 10;
    
    # Таймаут, по истечению которого keep-alive соединение с клиентом не будет закрыто со стороны сервера
    keepalive_timeout 5 5;
    
    # Максимальное количествоо keepalive запросов от одного клиента
    keepalive_requests 100;
    
    # If the client stops reading data, free up the stale client connection after this much time.
    # Таймаут при передаче ответа клиенту
    send_timeout 10;

  server {

    listen       80;

    root /usr/html;
    index  index.php index.html index.htm;
    access_log stdout;
    error_log stderr notice;

    disable_symlinks off;

    location = /robots.txt {
      allow all;
      log_not_found off;
      access_log off;
    }
	
	location = /favicon.ico {
      allow all;
      log_not_found off;
      access_log off;
    }

    location / {
      try_files $uri $uri/ /index.php?$args;
	  add_header 'Freedom' 'Rambler must dui';
    }
	
	#Ограничь количество доступных методов обращения к Web-серверу
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {return 444;}

    location ~* /(?:uploads|files)/.*\.php$ {
    	deny all;
    }

    location ~ [^/]\.php(/|$) {
      fastcgi_split_path_info ^(.+?\.php)(/.*)$;
      if (!-f $document_root$fastcgi_script_name) {
        return 404;
      }
      fastcgi_pass unix:/var/run/php7-fpm.sock;
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      include fastcgi_params;
    }

    ## Block SQL injections
    location ~* union.*select.*\( { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* union.*all.*select.* { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* concat.*\( { access_log /usr/logs/nginx/blocked.log blocked; deny all; }

    ## Block common exploits
    location ~* (<|%3C).*script.*(>|%3E) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* base64_(en|de)code\(.*\) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* (%24&x) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* (%0|%A|%B|%C|%D|%E|%F|127\.0) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* \.\.\/  { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* ~$ { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* proc/self/environ { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* /\.(htaccess|htpasswd|svn) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }

    ## Block file injections
    location ~* [a-zA-Z0-9_]=(\.\.//?)+ { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
    location ~* [a-zA-Z0-9_]=/([a-z0-9_.]//?)+ { access_log /usr/logs/nginx/blocked.log blocked; deny all; }

    ## Tiny Tiny RSS security
    location ~* (licence|readme|license)\.(html|txt) { access_log /usr/logs/nginx/blocked.log blocked; deny all; }
	location ~ /\.ht {deny  all;}
    location = /cache {deny  all;}
    location = /config.php {deny  all;}
	
	#Add option
    
    #заставит nginx скрывать информацию о типе и версии Web-сервера на страницах
    server_tokens off;
    
    # Настрой защиту от срыва стека
    # Максимальный размер буфера для хранения тела запроса клиента
    client_body_buffer_size 1K;
    # Максимальный размер буфера для хранения заголовков запроса клиента
    client_header_buffer_size 1k;
    # Максимальный размер тела запроса клиента, прописанный в поле Content-Length заголовка.
    #Если сервер должен поддерживать загрузку файлов, это значение необходимо увеличить
    #no plugin
    #client_max_body_size 2k;
    # Количество и размер буферов для чтения большого заголовка запроса клиента
    large_client_header_buffers 2 1k;

    #####	
    #
    location ~* ^.+\.(js|css|ogg|mp3|ogv|svg|svgz|eot|otf|woff|woff2|mp4|ttf|rss|atom|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
                access_log off;
                log_not_found off;
                expires 30d; # кеширование статики
		tcp_nodelay off;
		
		# Максимальное количество файлов в кэше
		open_file_cache max=5000 inactive=20s;
		# Через какое время будет удалён кэш
		open_file_cache_valid 45s;
		# Кэширование информации использованной хотя бы 2 раза
		open_file_cache_min_uses 2;
		# Кэширование информации об отсутствующих файлах
		open_file_cache_errors on;
        }
    
    ## deny access to all other .php files
    location ~* ^.+\.php$ {
        deny all;
        return 403;
    }

  }

}
